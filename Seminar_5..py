"""Урок 5. Интераторы и генераторы"""


"""
- Однострочники -
 a, b = b, a
Обычная распаковка a, b, c = последовательность

Распаковка с упаковкой a, *b, c = последовательность

Распаковка со звёздочкой * последовательность

- Итераторы -
Функция iter()
✔ iter(object[, sentinel])
Функция принимает на вход object поддерживающий 
итерацию. Второй параметр функции iter — sentinel 
передают для вызываемых объектов-итераторов

Функция next()
✔ next(iterator[, default])
На вход функция принимает итератор, 
который вернула функция iter.
Второй параметр функции next — default 
нужен для возврата значения по умолчанию 
вместо выброса исключения StopIteration.

- Генераторы -

List comprehensions
✔ list_comp = [expression for expr in sequense1 if condition1 ...]
Генератор списков формирует list заполненный данным и присваивает его переменной.

Генераторные выражения или генерация списка
На выходе нужен готовый список?
✔ list comprehensions
✔ [квадратные скобки]
Элементы нужны последовательно?
✔ генераторное выражение
✔ (круглые скобки)

Set и dict comprehensions
Set comprehensions
set_comp = {expression for expr in sequense1 if condition1 …}
Dict comprehensions
dict_comp = {key: value for expr in sequense1 if condition1 …}
Сходства и различия
{используются фигурные скобки для выражения}
словарь подставляет ключ и значение через двоеточие

Создание функции генератора
Команда yield
Команда yield работает аналогично return.
Но вместо завершения функции запоминает её состояние. 
Повторный вызов продолжает код после yield.
def gen(*args, **kwargs):
 ...
 yield result

"""




