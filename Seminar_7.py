"""Урок 7. Файлы и файловая система"""


"""
- Функция open()
В Python для получения доступа файлу используют функцию open()
open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)

- Режимы работы с файлами
✔ 'r' — открыть для чтения (по умолчанию)
✔ 'w' — открыть для записи, предварительно очистив файл
✔ 'x' — открыть для эксклюзивного создания. Вернёт ошибку, если файл уже существует
✔ 'a' — открыть для записи в конец файла, если он существует
✔ 'b' — двоичный режим
✔ 't' — текстовый режим (по умолчанию)
✔ '+' — открыты для обновления (чтение и запись)

- Метод close()
✔ f.close()
Если в коде отсутствует метод close(), то даже при успешном завершении 
программы не гарантируется сохранение всех данных в файле

- Прочие необязательные параметры функции open
✔ buffering — определяет режим буферизации
✔ errors — используется только в текстовом режиме и определяет поведение в случае ошибок 
кодирования или декодирования
✔ newline — отвечает за преобразование окончания строки 
✔ closefd — указывает оставлять ли файловый дескриптор открытым при закрытии файла
✔ opener — позволяет передать пользовательскую функцию для открытия файла

- Менеджер контекста with open
with open('text_data.txt', 'r+', encoding='utf-8') as f:
print(list(f))
✔ with гарантирует закрытие файла и сохранение информации

- Чтение файла
list(f)
Чтение в список
res = f.read()
Чтение методом read
res = f.readline()
Чтение методом readline
for line in f:
Чтение циклом for


- Запись и добавление в файл
res = f.write(text)
Запись методом write
f.writelines('\n'.join(text))
Запись методом writelines
print(text, file=f)
print в файл

w
создаём новый пустой файл для записи. 
Если файл существует, открываем его для 
записи и удаляем данные, которые в нём 
хранились
x
создаём новый пустой файл для записи. 
Если файл существует, вызываем ошибку
a
открываем существующий файл для записи 
в конец, добавления данных. Если файл 
не существует, создаём новый файл 
и записываем в него

- Методы перемещения в файле
f.tell()
Метод tell возвращает текущую 
позицию в файле

seek(offset, whence=0)
offset — смещение относительно 
опорной точки,
whence — способ выбора 
опороной точки.
✔ whence=0 — отсчёт 
от начала файла
✔ whence=1 — отсчёт от 
текущей позиции в файле 
✔ whence=2 — отсчёт 
от конца файла

truncate(size=None)
Метод изменяет размер файла. 
Если не передать значение 
в параметр size будет удалена 
часть файла от текущей позиции 
до конца


- Файловая система - 

from pathlib import Path

Для получения информации о текущем каталоге м
print(Path.cwd())
Для создания каталога
Path('new_path_dir').mkdir()
Для удаления одного каталога
Path('some_dir/dir/new_path_dir').rmdir()
Если необходимо удалить каталог со всем его содержимым
import shutil
shutil.rmtree('dir/other_dir')
shutil.rmtree('some_dir')
Формирование пути
file_2 = Path().cwd() / 'dir' / 'new_file.txt'
print(f'{file_2 = }\n{file_2}')

Переименование файлов
Path('new_file.py').rename('newest_file.py')
Перемещение файлов
old_file = Path('new_name.py')
new_file = old_file.replace(Path.cwd() / 'new_os_dir' / old_file)
Копирование файлов
import shutil
shutil.copy('one.txt', 'dir')
shutil.copy2('two.txt', 'dir')
скопировать каталог
import shutil
shutil.copytree('dir', 'one_more_dir')
Удаление файлов
Path('one_more_dir/one_more.txt').unlink()
удаления всего каталога
import shutil
shutil.rmtree('dir')



"""




