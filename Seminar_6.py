"""Урок 6. Модули"""

"""
- Простой импорт
import sys

print(sys)
print(sys.builtin_module_names)
print(*sys.path, sep='\n')

- Абсолютный импорт
import from
from sys importn builtin_module_names

import as
import numpy as np

✔ from имя_модуля import *
Подобная запись импортирует из модуля все 
глобальные объекты за исключением тех, чьи 
имена начинаются с символа подчёркивания.

Переменная __all__
✔ __all__ = ['func', '_secret', '...']
Cписок имён объектов, заключённых в кавычки, т.е. строки для импорта через «звёздочку».

- Относительный импорт
from . import other_module
from .. import other_module
from ..other_package import
other_module


Создание пакетов и их импорт

Файл __init__.py
Директоия с __init__.py превращается в пакет

Модуль sys и запуск скрипта с параметрами
from sys import argv
print('start')
print(argv)
print('stop')
Команда запуска:
python script.py -d 42 -s "Hello world!" -k 100

Модуль random
Модуль используется для генерации псевдослучайных чисел.
✔ random() — генерирует псевдослучайные числа в диапазоне [0, 1)
✔ seed(a=None, version=2) — инициализирует генератор. Если значение 
a не указано, для инициализации используется текущее время ПК
✔ getstate() — возвращает объект с текущим состоянием генератора
✔ setstate(state) — устанавливает новое состоянии генератора, 
принимая на вход объект, возвращаемый функцией getstate

randint(a, b) - целое число от a до b
uniform(a, b) - вещественное число от a до b
choice(seq) - случайный элемент последовательности
randrange(start, stop[, step]) - число из диапазона
shuffle(x) - перемешиваем коллекцию x in place
sample(population, k, *, counts=None) - Выборка в k элементов из population
"""

"""Task_1
Вспомните какие модули вы уже проходили на курсе.
Создайте файл, в котором вы импортируете встроенные в модуль функции под псевдонимами. (3-7 строк импорта).
"""

# встроенные
import sys
import math
from collections import Counter, deque
import random

# установленные
import numpy as np

# написанные
import Task_5

"""Task_2
Создайте модуль с функцией внутри.
Функция принимает на вход три целых числа: нижнюю и верхнюю границу и количество попыток.
Внутри генерируется случайное число в указанных границах и пользователь должен угадать его за заданное число попыток.
Функция выводит подсказки “больше” и “меньше”.
Если число угадано, возвращается истина, а если попытки исчерпаны - ложь.
"""

# Seminar_6_Module - guess_the_number.py

"""Task_3
Улучшаем задачу 2.
Добавьте возможность запуска функции “угадайки” из модуля в командной строке терминала.
Строка должна принимать от 1 до 3 аргументов: параметры вызова функции.
Для преобразования строковых аргументов командной строки в числовые параметры используйте генераторное выражение.
"""

from sys import argv
from Seminar_6_Module.guess_the_number import guess_number


if __name__ == '__main__':
    print(argv)

    "with case"
    # n = len(argv)
    # match n:
    #     case 1:
    #         lower_limit = 0
    #         upper_limit = 100
    #         count = 10
    #     case 2:
    #         lower_limit = int(argv[1])
    #         upper_limit = 100
    #         count = 10
    #     case 3:
    #         lower_limit = int(argv[1])
    #         upper_limit = int(argv[2])
    #         count = 10
    #     case _:
    #         lower_limit = int(argv[1])
    #         upper_limit = int(argv[2])
    #         count = int(argv[3])
    guess_number(*map(int, argv[1:]))

            
"""Task_4
Создайте модуль с функцией внутри.
Функция получает на вход загадку, список с возможными вариантами отгадок и количество попыток на угадывание.
Программа возвращает номер попытки, с которой была отгадана загадка или ноль, если попытки исчерпаны.
"""
from Seminar_6_Module.puzzles import secrets


if __name__ == '__main__':
    result = secrets('Зимой и летом одним цветом', ['ель', 'ёлка', 'сосна'])
    print(f'Угадал с {result} попытки' if result > 0 else 'Не угадал')


"""Task_5
Добавьте в модуль с загадками функцию, которая хранит словарь списков. Ключ словаря - загадка,
значение - список с отгадками. Функция в цикле вызывает загадывающую функцию, чтобы передать ей все свои загадки.
# """

from Seminar_6_Module.puzzles import storage


if __name__ == '__main__':
    storage()

"""Task_6
Добавьте в модуль с загадками функцию, которая принимает на вход строку (текст загадки) и число (номер попытки, с которой она угадана).
Функция формирует словарь с информацией о результатах отгадывания. Для хранения используйте защищённый словарь уровня модуля.
Отдельно напишите функцию, которая выводит результаты угадывания из защищённого словаря
в удобном для чтения виде. Для формирования результатов используйте генераторное выражение.
"""

from Seminar_6_Module.puzzles import storage_with_generator_result, save, show

if __name__ == '__main__':
    generator = storage_with_generator_result()
    for key, result in generator:
        save(key, result)
    show()


"""Task_7
Создайте модуль и напишите в нём функцию, которая получает на вход дату в формате DD.MM.YYYY
Функция возвращает истину, если дата может существовать или ложь, если такая дата невозможна.
Для простоты договоримся, что год может быть в диапазоне [1, 9999].
Весь период (1 января 1 года - 31 декабря 9999 года) действует Григорианский календарь.
Проверку года на високосность вынести в отдельную защищённую функцию.
"""

from Seminar_6_Module.leap_year import check_day


if __name__ == '__main__':
    print(check_day('24.05.2000'))

"""Task_8
Создайте пакет с всеми модулями, которые вы создали за время занятия.
Добавьте в __init__ пакета имена модулей внутри дандер __all__.
В модулях создайте дандер __all__ и укажите только те функции, которые могут верно работать за пределами модуля."""

# Seminar_6_Module - __init__.py
