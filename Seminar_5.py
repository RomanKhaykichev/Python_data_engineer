"""Урок 5. Интераторы и генераторы"""


"""
- Однострочники -
 a, b = b, a
Обычная распаковка a, b, c = последовательность

Распаковка с упаковкой a, *b, c = последовательность

Распаковка со звёздочкой * последовательность

- Итераторы -
Функция iter()
✔ iter(object[, sentinel])
Функция принимает на вход object поддерживающий 
итерацию. Второй параметр функции iter — sentinel 
передают для вызываемых объектов-итераторов

Функция next()
✔ next(iterator[, default])
На вход функция принимает итератор, 
который вернула функция iter.
Второй параметр функции next — default 
нужен для возврата значения по умолчанию 
вместо выброса исключения StopIteration.

- Генераторы -

List comprehensions
✔ list_comp = [expression for expr in sequense1 if condition1 ...]
Генератор списков формирует list заполненный данным и присваивает его переменной.

Генераторные выражения или генерация списка
На выходе нужен готовый список?
✔ list comprehensions
✔ [квадратные скобки]
Элементы нужны последовательно?
✔ генераторное выражение
✔ (круглые скобки)

Set и dict comprehensions
Set comprehensions
set_comp = {expression for expr in sequense1 if condition1 …}
Dict comprehensions
dict_comp = {key: value for expr in sequense1 if condition1 …}
Сходства и различия
{используются фигурные скобки для выражения}
словарь подставляет ключ и значение через двоеточие

Создание функции генератора
Команда yield
Команда yield работает аналогично return.
Но вместо завершения функции запоминает её состояние. 
Повторный вызов продолжает код после yield.
def gen(*args, **kwargs):
 ...
 yield result

"""

"""Task_1
Пользователь вводит строку из четырёх
или более целых чисел, разделённых символом “/”.

Сформируйте словарь, где:
второе и третье число являются ключами.
первое число является значением для первого ключа.
четвертое и все возможные последующие числа
хранятся в кортеже как значения второго ключа.
"""

# a, b, c, *d = input('четырё или более целых чисел, разделённых символом “/”: ').split('/')
# dictionary = {b: a, c: tuple(d)}
# print(dictionary)

"""Task_2
Самостоятельно сохраните в переменной строку текста.
Создайте из строки словарь, где ключ — буква, а значение — код буквы.
Напишите преобразование в одну строку.
"""

# text = 'Без труда не выловить и рыбку из пруда!'
# print({key: ord(key) for key in text}) # dict comprehension

"""Task_3
Продолжаем развивать задачу 2.
Возьмите словарь, который вы получили.
Сохраните его итератор.
Далее выведите первые 5 пар ключ-значение,
обращаясь к итератору, а не к словарю.
"""
# import sys

# text = 'Без труда не выловить и рыбку из пруда!'
# dictionary_char = {key: ord(key) for key in text}
# iter_dictionary = iter(dictionary_char.items())
# # print(iter_dictionary, type(iter_dictionary), sys.getsizeof(iter_dictionary), sys.getsizeof(dictionary_char))
# # print(next(iter_dictionary)) - забирает и забывает из словаря.
# for item in range(5):
#     print(next(iter_dictionary))

"""Task_4
Создайте генератор чётных чисел от нуля до 100.
Из последовательности исключите
числа, сумма цифр которых равна 8.
Решение в одну строку.
"""

# Ver_1
print(*(i for i in range(0, 101, 2) if sum(map(int, str(i))) != 8))

# Ver_2
print(*(i for i in range(0, 101, 2) if sum([int(j) for j in str(i)]) != 8))

"""Task_5

"""
